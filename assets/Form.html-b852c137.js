import{_ as a,p as n,q as s,a1 as t}from"./framework-5866ffd3.js";const e={},p=t(`<h1 id="form" tabindex="-1"><a class="header-anchor" href="#form" aria-hidden="true">#</a> Form</h1><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><h3 id="form属性" tabindex="-1"><a class="header-anchor" href="#form属性" aria-hidden="true">#</a> Form属性</h3><p>initialValues：表单默认值，只有初始化以及重置时生效，object form：经 Form.useForm() 创建的 form 控制实例，不提供时会自动创建，FormInstance onFinish：提交表单且数据验证成功后回调事件，function(values)</p><h3 id="forminstance属性" tabindex="-1"><a class="header-anchor" href="#forminstance属性" aria-hidden="true">#</a> FormInstance属性</h3><p>getFieldValue：获取对应字段名的值，(name: NamePath) =&gt; any getFieldsValue：获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 getFieldsValue(true) 时返回所有值，(nameList?: NamePath[], filterFunc?: (meta: { touched: boolean, validating: boolean }) =&gt; boolean) =&gt; any</p><h3 id="form-item属性" tabindex="-1"><a class="header-anchor" href="#form-item属性" aria-hidden="true">#</a> Form.Item属性</h3><p>label：label 标签的文本，ReactNode（表单项前面的名字，账号密码之类的） name：字段名，支持数组，string | number | (string | number)[] rules：校验规则，设置字段的校验逻辑，RuleConfig | ((form: FormInstance) =&gt; RuleConfig);</p><h3 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h3><p>Form.useForm()：创建 Form 实例，用于管理所有数据状态。</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><h3 id="获取表单数据" tabindex="-1"><a class="header-anchor" href="#获取表单数据" aria-hidden="true">#</a> 获取表单数据</h3><p>获取表单数据</p><p>1.useForm() 获取Form实例，管理所有的状态数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.表单绑定onFinish事件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inline<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onFinish</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>finish<span class="token punctuation">}</span></span> <span class="token attr-name">onReset</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>reset<span class="token punctuation">}</span></span> <span class="token attr-name">form</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>form<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.获取所有的表单数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> hoscode<span class="token punctuation">,</span> hosname <span class="token punctuation">}</span> <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><h3 id="label标签" tabindex="-1"><a class="header-anchor" href="#label标签" aria-hidden="true">#</a> label标签</h3><p>HTML <code>&lt;label&gt;</code> 元素（标签）表示用户界面中某个元素的说明。</p><p>将一个 <code>&lt;label&gt;</code> 和一个 <code>&lt;input&gt;</code> 元素匹配在一起，你需要给 <code>&lt;input&gt;</code> 一个 id 属性。而 <code>&lt;label&gt;</code> 需要一个 for 属性，其值和 <code>&lt;input&gt;</code> 的 id 一样。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preference<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>peas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Do you like peas?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>peas<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>peas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，你也可以将 <code>&lt;input&gt;</code> 直接放在 <code>&lt;label&gt;</code> 里，此时则不需要 for 和 id 属性，因为关联已隐含存在：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Do you like peas?
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>peas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他使用事项：</p><p>关联标签的表单控件称为这个标签的已关联标签的控件。一个 input 可以与多个标签相关联。 点击或者轻触（tap）与表单控件相关联的 <code>&lt;label&gt;</code> 也可以触发关联控件的 click 事件。</p><h3 id="原生表单" tabindex="-1"><a class="header-anchor" href="#原生表单" aria-hidden="true">#</a> 原生表单</h3><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><p>name：</p><ul><li>表单的名称。HTML 4 中不推荐（应使用 id）。在 HTML 5 中，该值必须是所有表单中独一无二的，而且不能是空字符串。</li><li>name 属性用于对提交到服务器后的表单数据进行标识，或者在客户端通过 JavaScript 引用表单数据。</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>注释：只有设置了 name 属性的表单元素才能在提交表单时传递它们的值。</p></div><p>action</p><ul><li>必需的 action 属性规定当提交表单时，向何处发送表单数据。</li><li>HTMLFormElement.action 这个 js 语句能够定义一个 <code>&lt;form&gt;</code> 元素中的 action 属性</li><li>值是一个url <ul><li>绝对 URL - 指向其他站点（比如 src=&quot;www.example.com/example.htm&quot;）</li><li>相对 URL - 指向站点内的文件（比如 src=&quot;example.htm&quot;）</li></ul></li></ul><p>method</p><ul><li>method 属性规定如何发送表单数据（表单数据发送到 action 属性所规定的页面）。表单数据可以作为 URL 变量（method=&quot;get&quot;）或者 HTTP post （method=&quot;post&quot;）的方式来发送。</li></ul><hr><p>24栅格 labelcol和wrappercol</p>`,39),o=[p];function c(l,i){return n(),s("div",null,o)}const r=a(e,[["render",c],["__file","Form.html.vue"]]);export{r as default};
