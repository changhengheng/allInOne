import{_ as l,p as i,q as t,a1 as p}from"./framework-5866ffd3.js";const e={},a=p('<h1 id="字符串方法总结" tabindex="-1"><a class="header-anchor" href="#字符串方法总结" aria-hidden="true">#</a> 字符串方法总结</h1><p>全都是String原型上的方法，可供所有的实例化对象调用：</p><p>concat：</p><ul><li>合并字符串，可以把多个字符串合并在一起，返回一个新的字符串</li><li>现代浏览器对+拼接字符串做了优化，所以直接使用+会更好</li><li>传递一至多个参数</li></ul><p>toLowerCase(): 让字符串全部变成小写</p><p>toUpperCase() 让字符串全部变成大写</p><p>字符串查找:</p><ul><li><p>indexOf和lastIndexOf</p><ul><li>查找某个字符串在另一个字符串中第一次出现的下标</li><li>indexOf是从前向后查</li><li>lastIndexOf是从后向前查</li><li>如果查询不到则返回-1</li></ul></li><li><p>charAt()</p><ul><li>根据下标查询对应的字符</li><li>也可以通过[]查询下标对应的字符串</li><li>charAt查询不到则返回一个空串 []查询不到则返回undefined</li></ul></li><li><p>search()</p><ul><li>和indexOf类似，也是搜索某个字符串在另一个字符串中第一次出现的位置</li><li>可以匹配正则</li></ul></li><li><p>match(正则)</p><ul><li>查询字符串中能喝正则匹配上的值 组成一个数组返回</li></ul></li></ul><p>截取字符串</p><ul><li><p>subStr()</p><ul><li>截取字符串 返回截取的字符串</li><li>参数1：开始截取的位置(如果为负 则倒着数)</li><li>参数2：截取字符串的长度(如果忽略 则代表截取到最后)</li></ul></li><li><p>subString()</p><ul><li>截取字符串 返回截取的字符串</li><li>参数1：开始截取的位置(如果为负 则默认0)</li><li>参数2：截取的结束位置(不包含结束位置)(如果小于参数1，则和参数1交换位置)(如果忽略则截取到最后)</li></ul></li><li><p>slice()</p><ul><li>截取字符串 返回截取的字符串</li><li>参数1：开始截取的位置(如果为负，则倒着数)</li><li>参数2：结束截取的位置(不包含)(如果为负，则倒着数)</li></ul></li></ul><p>split() - 字符串转数组 - 如果不传递参数 则整个字符串是数组的一个值 - 如果传递一个空串，则每一个字符都是数组的一个值 - 其他可以以传入的参数为切割</p><p>trim:去除字符串两端的空格 trimStart:去除字符串开头的空格 trimEnd:去除字符串结尾的空格 startsWith();判断开头有没有包含某个字符串 endsWith();判断结尾有没有包含某个字符串 includes判断字符串是否包含某个字符串</p><p>repeat重复当前的字符串，可以规定次数</p><p>padStart()当字符串不够某个长度的时候，在前边补充任意字符 padEnd()当字符串不够某个长度的时候，在后边补充任意字符</p>',14),r=[a];function n(u,s){return i(),t("div",null,r)}const d=l(e,[["render",n],["__file","JS字符串方法总结.html.vue"]]);export{d as default};
