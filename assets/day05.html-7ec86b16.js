import{_ as e,M as o,p as c,q as l,R as s,t as n,N as t,a1 as p}from"./framework-5866ffd3.js";const i={},u=p('<h1 id="day05" tabindex="-1"><a class="header-anchor" href="#day05" aria-hidden="true">#</a> day05</h1><h2 id="vuecli创建的vue2项目中的render函数" tabindex="-1"><a class="header-anchor" href="#vuecli创建的vue2项目中的render函数" aria-hidden="true">#</a> VueCli创建的Vue2项目中的render函数</h2><p>压缩版不带模板解析器，单独拆成了一个包</p><p>render函数是在调用这个包的模板解析器，用来渲染页面</p><h2 id="关闭eslint语法检查" tabindex="-1"><a class="header-anchor" href="#关闭eslint语法检查" aria-hidden="true">#</a> 关闭ESLint语法检查</h2><p>vue.config.js是vueCli的配置文件，怎么用查vueCli官网其中有一个lintOnSave配置项用来控制eslint的语法检查。</p>',6),r={href:"https://github.com/webpack-contrib/eslint-loader",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"@vue/cli-plugin-eslint",-1),v=p(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>定义组件名的方式有两种：</p><ol><li><p>使用 kebab-case（短横线分隔命名）</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>Vue.component(&#39;MyComponentName&#39;, { /* ... */ })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当使用 kebab-case (短横线分隔命名) 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case，例如 <code>&lt;my-component-name&gt;</code>。</p></li><li><p>使用 PascalCase（大驼峰）</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>Vue.component(&#39;MyComponentName&#39;, { /* ... */ })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的。</p></li></ol></div><h2 id="scoped" tabindex="-1"><a class="header-anchor" href="#scoped" aria-hidden="true">#</a> scoped</h2><p>Vue和React一样，组件最终通过webpack打包之后，各组件中的css样式最终都会打包到模板文件index.html中去，这样导致最终的结果就是css的全局污染。React中我们可以通过层层件套的选择器以及less来解决这个问题，Vue中提供了 <code>&lt;style&gt;&lt;/style&gt;</code> 的scoped配置项限定css的作用域在当前组件内。本质上是生成了一个随机数来区分不同组件</p><h2 id="案例-header、nav、footer" tabindex="-1"><a class="header-anchor" href="#案例-header、nav、footer" aria-hidden="true">#</a> 案例：Header、Nav、Footer</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>数组走了代理，对象也走了代理，数组元素没有走代理，如果数组元素是对象，这个对象也是走了代理的。只要走了代理，数据就都是响应式的。</p></div><h2 id="mixin-混入" tabindex="-1"><a class="header-anchor" href="#mixin-混入" aria-hidden="true">#</a> mixin 混入</h2><p>作用：抽离组件中的公共代码（指js代码，主要是【data、 methods、computed、watch、八个钩子】，template可以抽离成组件，css可以写成公共样式）</p><p>特点： 实例对象【vm】 和 组件对象【vc】 所拥有的属性 mixin基本都有。相比于vm和vc，mixin没有template配置</p><p>定义位置：<code>src/mixins</code> minxins里都是.js文件</p><p>使用：组件配置对象上有一个 <code>mixins</code> 配置项，值是一个数组，放置导入的封装好的 mixin</p><p><code>mixin</code> 里的 <code>this</code> 指向使用它的组件对象</p><p>注意：</p><ol><li><p>mixin 中的【methods、computed、watch、八个钩子】 中的this 指向混入的这个组件对象【vc】</p></li><li><p>mixin 中的data、computed 数据 也会代理到 混入的组件的对象上。</p></li><li><p>mixin 中的 methods 方法 也会 放在 组件对象上。</p></li><li><p>组件中的 data 、methods、computed、watch 优先级 高于 mixin混入。</p></li><li><p>mixin 中的生命周期钩子会合并进 组件中，mixin和组件的两个钩子都会执行，且 mixin 的钩子优先级高于组件的钩子。</p></li></ol><p>定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/mixins</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用（以nav为例）：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 引入定义好的mixin</span>
<span class="token keyword">import</span> nav <span class="token keyword">from</span> <span class="token string">&quot;../mixins/nav&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Footer&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;关于我们&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;招聘信息&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;联系我们&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;合作伙伴&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;企业文化&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用mixin  </span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span><span class="token punctuation">[</span>nav<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目结构优化" tabindex="-1"><a class="header-anchor" href="#项目结构优化" aria-hidden="true">#</a> 项目结构优化</h2><p>用路由组件Home组织好一般公共组件</p><h2 id="项目数据优化" tabindex="-1"><a class="header-anchor" href="#项目数据优化" aria-hidden="true">#</a> 项目数据优化</h2><p>单向数据流，由路由组件管理好数据</p><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h2><p>作用： 接受父组件传递的数据</p><p>特点：</p><ol><li>props 所接受的父组件的数据也会代理到当前的子组件对象上，也是响应式的。可以直接通过 this 获取。</li><li>props是只读的（单向数据流），不能在子组件中直接修改props接收的数据</li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>JS数据传递有两种方式：值传递和引用传递。</p><p>值传递的数据直接更改会报错。</p><p>数组和对象是引用传递，可以更改其中的属性，并且不会报错。但是，这样做不符合单向数据流的规范，严禁这样去做。</p></div><p>传参</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nav</span> <span class="token attr-name">:nav</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nav</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用 <code>v-bind</code> 传递动态 <code>props</code> 数据</p></div><p>接收</p><p>方式一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nav&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// props配置项</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;nav&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nav&quot;</span><span class="token punctuation">,</span> 
    <span class="token comment">// props配置项</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接收的属性数据</span>
        <span class="token literal-property property">nav</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
            <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;杂&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;瓦&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;鲁&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;多&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token function">validator</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><code>type</code> 约束接受数据的类型 Array、Object、String、Number、Boolean、Function</p></li><li><p><code>required</code> 必须接受、传递</p></li><li><p><code>default</code> 默认数据，值为 String、Number、Boolean 直接写数据。值为 Array、Object 时，值为一个函数，返回一个Array、Object，Function 没有默认数据。</p></li><li><p><code>validator函数</code> 自定义验证，默认参数是接收到的数据。返回值是一个布尔值，决定是否通过验证。</p></li></ol><p>因为更改数据只能在父组件中进行，所以更改数据的回调也必须在父组件中去定义，只不过需要传递给子组件去使用。而props除了可以传递属性数据之外，还可以传递方法数据。</p><p>传递方法数据：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nav</span> <span class="token attr-name">:nav</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:showDetail</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showDetail<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nav</span><span class="token punctuation">&gt;</span></span>
methods: {
 showDetail(i) {
     this.nav[i].isShow = !this.nav[i].isShow;
    },
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收方法数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nav&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接收父组件传递过来的方法数据</span>
        <span class="token literal-property property">showDetail</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
            <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>面试题：</p><p>props和data和computed中有同名属性时，哪一个优先级高？（这三类数据最终都会代理到vm或者组件对象身上，存在同名覆盖的问题）</p><ul><li><p>props和data，props优先级高</p></li><li><p>props和data和computd，computd优先级高</p></li></ul></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>props可以传递属性数据，也可以传递方法数据。传递方法数据给子组件使用时，子组件可以调用该方法并传递实参，并可以获取该函数调用的返回值。</p></div><h2 id="vue-插件" tabindex="-1"><a class="header-anchor" href="#vue-插件" aria-hidden="true">#</a> vue 插件</h2><ol><li>Vue Language Features (Volar)</li><li>Vetur</li><li>Vue VSCode Snippets</li></ol><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> Ref</h2><p>对比React中3中形式的ref，Vue中只有一种（字符串类型）用法。</p><p>作用：</p><ol><li>获取当前组件内的真实DOM</li><li>获取当前组件内的子组件的组件对象 <ul><li>可以获取和修改子组件的数据、方法，调用子组件方法时还可以传参</li></ul></li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>React里也可以用ref获取子组件对象，但是它不推荐这么去做。</p></div><p>绑定Ref：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--获取真实DOM--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getCon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击获取内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>con<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>con<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取真实DOM：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Ref&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取真实DOM</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">let</span> con <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>con<span class="token punctuation">;</span>
      con<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>this.$refs 拿到的是一个对象，其中属性名是绑定的ref标识符，属性值是对应的真实DOM。</p><p>获取子组件对象：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--给子组件对象绑定ref--&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>One</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>One</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getOne<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>获取子组件对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ str }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>update()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击更新数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">&quot;one的数据&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;one默认数据&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件操作子组件对象的方法：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> One <span class="token keyword">from</span> <span class="token string">&quot;../components/Ref/One&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Ref&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    One<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>one<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;父组件修改子组件one的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60);function m(g,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("lintOnSave决定是否在开发环境下通过 "),s("a",r,[n("eslint-loader"),t(a)]),n(" 在每次保存时 lint 代码。这个值会在 "),s("a",d,[k,t(a)]),n(" （vuecli内置）被安装之后生效。")]),v])}const y=e(i,[["render",m],["__file","day05.html.vue"]]);export{y as default};
