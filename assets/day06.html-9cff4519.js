import{_ as a,p as e,q as i,a1 as n}from"./framework-5866ffd3.js";const s={},t=n(`<h2 id="day-06" tabindex="-1"><a class="header-anchor" href="#day-06" aria-hidden="true">#</a> day 06</h2><h3 id="todolist" tabindex="-1"><a class="header-anchor" href="#todolist" aria-hidden="true">#</a> todolist</h3><p>拆组件</p><p>组装组件</p><p>渲染组件</p><p>设计数据：最小原则——能用已有数据得到的就没必要设计成状态数据</p><p>函数式组件接收props传递的数据：</p><p>函数的默认参数是props，是一个对象，用来接收父组件传过来的props数据（本质上是打包了父组件中子组件标签上的所有属性所形成的一个对象）。</p><p>组件的执行流程，实际上返回的是虚拟DOM</p><p>用受控组件收集数据：</p><p>只要用了状态数据，就会报只读的错</p><p>单向数据流问题：更新数据的方法只能定义在state数据所在的组件内</p><p>react改数据只能通过提供的方法（函数式组件）或者setState（类式组件），且新数据必须与原数据不一样（如果是对象需要传入一个地址不一样的新数据），这样react才是认可的</p><p>测试方法</p><p>多敲多练——以后也要持续练</p><h3 id="hook注意点" tabindex="-1"><a class="header-anchor" href="#hook注意点" aria-hidden="true">#</a> hook注意点</h3><ol><li>只能在函数最顶层用，不能在条件或判断中用</li><li>不能在函数式组件外（函数体外）去用</li></ol><p>https://www.jianshu.com/p/796a9d0da8e9</p><p>A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component.</p><p>删除数据的方法只能定义在todolist里</p><h2 id="nanoid" tabindex="-1"><a class="header-anchor" href="#nanoid" aria-hidden="true">#</a> nanoid</h2><h2 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid" aria-hidden="true">#</a> UUID</h2><p>axios复习</p><p>无限请求</p><h2 id="前后台数据交互" tabindex="-1"><a class="header-anchor" href="#前后台数据交互" aria-hidden="true">#</a> 前后台数据交互</h2><ol><li>原生 js ---- XMLHttpRequest</li><li>jquery ---- ajax</li><li>react ---- axios</li><li>vue ---- axios</li></ol><h2 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> axios</h2><ol><li>纯粹 只做前后台数据交互</li><li>基于 Promise</li></ol><h3 id="_1-使用" tabindex="-1"><a class="header-anchor" href="#_1-使用" aria-hidden="true">#</a> 1.使用：</h3><ol><li>axios()</li><li>axios.get() axios.post()</li></ol><h3 id="_2-请求方式" tabindex="-1"><a class="header-anchor" href="#_2-请求方式" aria-hidden="true">#</a> 2.请求方式：</h3><ol><li>get(url，config) 获取</li><li>post(url,data,config) 新增</li><li>put(url,data,config) 全局更新</li><li>patch(url,data,config) 局部更新</li><li>delete(url,config) 删除</li></ol><h3 id="_3-config-配置对象" tabindex="-1"><a class="header-anchor" href="#_3-config-配置对象" aria-hidden="true">#</a> 3.config 配置对象</h3><ol><li>method</li><li>url</li><li>baseURL</li><li>data</li><li>params</li><li>headers</li><li>timeout</li></ol><h3 id="_4-安装使用" tabindex="-1"><a class="header-anchor" href="#_4-安装使用" aria-hidden="true">#</a> 4. 安装使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    npm i axios <span class="token operator">--</span>force
    <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="axios-1" tabindex="-1"><a class="header-anchor" href="#axios-1" aria-hidden="true">#</a> axios</h2><p>useEffect的回调不能是async函数，发请求需要在内部自定义一个异步函数去发请求</p><p>不设初始值报错的流程问题————</p><p>所有的css样式都是全局的</p><p>第一次看到渲染后的页面时函数执行了两次</p><p>https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/checkbox</p><p>https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/label</p><p>https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form</p><p>https://juejin.cn/post/6962856944130326558</p><h2 id="小工具" tabindex="-1"><a class="header-anchor" href="#小工具" aria-hidden="true">#</a> 小工具</h2><p>同时声明多个类</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn other<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>max-width、min-width创建响应式页面</p>`,49),o=[t];function l(d,p){return e(),i("div",null,o)}const c=a(s,[["render",l],["__file","day06.html.vue"]]);export{c as default};
