import{_ as p,p as e,q as s,a1 as i}from"./framework-5866ffd3.js";const r={},t=i("<p>模态框——弹框提示</p><p>段子组件练习模态框、axios</p><p>axios返回的是promise</p><p>复习promise.then.catch写法</p><p>async和await 是终极解决方案 await等待promise成功的值 .catch和.then的第二个形参是用来处理失败的promise的</p><p>数据要放在state里，因为只有state数据发生变化时，react才会重新渲染页面，放在其他地方react不认</p><p>模态框+遮罩层（不能点击其他链接） 复习定位</p><ul><li>写布局 模态框 遮罩层 样式 固定定位的新用法 <ul><li>全页面覆盖</li><li>水平垂直居中</li></ul></li></ul><p>设计数据</p><ul><li><p>多设变量</p></li><li><p>自定义属性</p></li><li><p>开关思想</p></li></ul><p>只要页面发生变化，就可以想着设计成状态数据（页面变是数据在变）</p><p>看源码学习，比如transition设计提示框</p><p>window的close方法复习</p><hr><p>todolist数据持久化</p><p>json-server的使用</p><p>安装 npm i -g json-server</p><p>创建server目录和db.json文件（可自定义名称）</p><p>启动服务（必须在server目录下）</p><p>json-server --watch db.json --port 8888</p><p>src是源代码目录，里面的所有文件最终都会被webpack打包（public是直接扔的），所以server目录要和src目录平级</p><p>收集讯息——找大的节点——外语——阮一峰等等</p><p>axios返回的是promise，then的response直接拿的是响应的数据</p><p>函数式组件执行流程： 先执行到return拿到虚拟dom，页面更新后再执行挂载完，然后再执行一次render（初次看到页面时render走了两次）</p><p>json-server的id会自增</p><ul><li>async和await + try...catch...</li><li>单独then</li><li>then的成功和catch</li></ul><p>最终都要用async+await</p><p>await等待的是promise成功的结果，不是promise对象</p><p>与服务器联系： 获取todo数据 新增todo数据</p><p>样式initial值的应用</p><p>新建src/utils/index.js</p><p>使用instance配置基础超时限制、进度条</p><p>NProgress</p><p>npm i nprogress</p><p>找包的顺序：nodemodules-包名-package.json-main（入口文件）</p><p>import NProgress（要求大写）from &#39;nprogress&#39; import &#39;nprogress/nprogress.css&#39;</p><p>请求拦截器和响应拦截器（把NProgress添加到拦截器里）</p><p>token和session</p><p>怎么样自己学一个包？不是说讲完就只会讲的那些，而是要自己学会</p><p>怎么用通常很容易想</p><p>拦截器第一个回调（成功回调）的形参config是请求的所有配置的配置对象，需要return出去，response是axios完整的响应体</p><p>直接在响应拦截器里处理响应结果，拿到我们需要的data即可</p><p>统一处理错误</p><ul><li>promise返回值</li></ul><p>拦截器里拦截响应，处理失败：</p><ul><li>返回一个失败的promise</li><li>throw 一个错误</li></ul><p>或者，直接在拦截器里处理错误，然后---&gt;</p><p>处理完后返回一个pending状态的promise（简化代码，不用写catch）（即不进then也不近catch）</p><p>同时用await等待promise成功的结果，可以省略写catch</p><p>trycatch也不用写</p><ul><li>删除</li><li>更新</li></ul><p>put和patch（局部更新）： 假设我们有一个UserInfo，里面有userId， userName， userGender等10个字段。你只想修改userName，这时候的更新怎么做？ 人们通常(为徒省事)把一个包含了修改后userName的完整userInfo对象传给后端，做完整更新。这种做法浪费带宽。patch诞生只传一个userName到指定资源去，表示该请求是一个局部更新，后端仅更新接收到的字段。</p><p>promise.all()</p><ul><li>批量更新（底部）</li></ul><p>axios携带参数</p><p>https://blog.csdn.net/luo1831251387/article/details/115641688</p><p>react-toastify</p><p>https://blog.csdn.net/weixin_48813932/article/details/124624103</p><p>https://ykloveyxk.github.io/2017/02/25/axios全攻略/</p><p>https://www.npmjs.com/package/json-server</p><p>封装api（简化代码）</p><p>index和js可以省略</p><p>新注释 /** 看源码-设计模式</p>",63),o=[t];function a(l,n){return e(),s("div",null,o)}const u=p(r,[["render",a],["__file","day07.html.vue"]]);export{u as default};
