import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},e=t(`<h2 id="新的hook" tabindex="-1"><a class="header-anchor" href="#新的hook" aria-hidden="true">#</a> 新的Hook</h2><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext()</h3><p>context 上下文的意思</p><p>useContext是新的组件间通信方式，可用于<strong>隔代传递</strong></p><p>hooks组件-useContext-A--B--C</p><p>使用：</p><ol><li><p>使用<code>createContext()</code>创建context对象，会返回一个上下文对象，将这个对象暴露出去</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> cn <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>上下文对象身上有一个内置组件 <code>&lt;context.Provider&gt;&lt;/context.Provider&gt;</code>，使用这个内置组件包裹所有的后代组件，并传递<code>value</code>属性（属性名是预先配置好的，不能更改），value的值就是要传递的数据，这样所有的后代组件都可以使用这个数据了</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">UseContextA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">UseContextA</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UseContextB</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UseContextB</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cn.Provider</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在要使用数据的组件里，引入暴露的上下文对象</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../UseContextA/UseContextA&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用useContext() 接收祖先组件传递的数据（直接调用，传入上下文对象，结果就是传递的数据），就能在当前组件内使用了</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">UseContextC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">UseContextC</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这个hook一般不用，但是得了解。</p><p>redux内部就是使用了这个hook封装的</p><h3 id="发布订阅机制-pubsub-js" tabindex="-1"><a class="header-anchor" href="#发布订阅机制-pubsub-js" aria-hidden="true">#</a> 发布订阅机制 pubsub-js</h3><p>原理应用很广</p><p>搜索功能</p><p>练习组件：heroSearch</p><p>pubsub适用于任意组件间通信</p><ol><li><p>安装</p></li><li><p>引入（在哪个组件使用就在哪个组件引入）</p></li><li><p>使用 三个方法：</p></li></ol><p>1.发布： <code>PubSub.publish(&#39;频道名称&#39;,要发布的数据)</code></p><p>2.订阅：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;频道名称&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
<span class="token comment">// message 要订阅的频道名称，和第一个参数意义，不用，但是必须写，因为要用data</span>
<span class="token comment">// data 订阅的数据</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.取消订阅： <code>PubSub.unsubscribe(&quot;要取消订阅的频道名称&quot;)</code> 不传参就取消订阅所有的频道</p><p>button的样式</p><p>pubsub不能直接写在函数式组件的最顶层，否则后续更新数据时组件会重新创建并挂载，就会进入无限循环</p><p>主动思考</p><p>想想明白思路，再一步一不做</p><p>axios封装的问题</p><p>sql模糊查询</p><p>优化：切换组件时取消订阅</p><p>组件将卸载和其他生命周期可以写在一个函数里</p><p>只要不更新视图，发布就可以不用写在生命周期内</p><h2 id="react路由" tabindex="-1"><a class="header-anchor" href="#react路由" aria-hidden="true">#</a> react路由</h2><p>SPA的概念：整个网站只有一个页面，这个页面由多个组件组成。</p><p>SPA都是通过路由实现的</p><p>区分路径和域名</p><p>路由的概念（key和value的映射）</p><p>做app用的native包，做网页用的dom包</p><p>安装 导入</p><p>APP根组件 导入三个内置组件：BrowserRouter、Route、Routes</p><p>BrowserRouter：包裹所有的路由组件 Routes：包裹所有的单个路由组件 Route：创建单个的路由组件（建立路由路径和路由组件之间的联系，该路由组件所在的位置就是对应路由组件渲染的出口。）</p><p>使用</p><p>Route创建单个路由组件：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>路由路径<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>组件<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>组件分类：</p><p>一般组件和路由组件</p><p>配置根路由：&#39;/&#39;</p><h3 id="路由导航-内置组件link" tabindex="-1"><a class="header-anchor" href="#路由导航-内置组件link" aria-hidden="true">#</a> 路由导航：内置组件Link</h3><p><code>Link</code> 组件用来创建路由导航（所有路由相关组件都要放在 <code>BrowserRouter</code> 里），<code>to</code> 属性用来导航至对应路由路径的组件。标签体可以写链接名（就是a标签）</p><p><code>NavLink</code>：可以设置样式的导航，带有一个动态的active类名</p><p><code>NavLink</code> 和 <code>Link</code> 的本质都是a链接，可以通过标签选择器取消下划线</p><p>（钻太深了，首尾不能顾）</p><p><code>BrowerRouter</code> 永远要放到路由组件的最外层：放到 <code>index.js</code> 里渲染根组件的地方</p><h3 id="多级路由" tabindex="-1"><a class="header-anchor" href="#多级路由" aria-hidden="true">#</a> 多级路由</h3><p>组件的新命名方式：统一 <code>index.jsx</code>，也可以命名为组件名（两种都可以）</p><p>子路由组件定义在一级路由组件的文件夹内</p><p>写法：嵌套在一级路由里，使用 <code>Route</code> 定义即可</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xinwen<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Xinwen</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Xinwen</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xinwen/guonei<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Guonei</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Guonei</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guoji<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Guoji</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Guoji</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>path配置路由路径的两种方式：</p><ul><li>简写：只写当前路由路径，不加 <code>/</code></li><li>全写：从一级路由一直拼接到当前层级的路由路径</li></ul><p>使用 <code>NavLink</code>（任意地方）导航二级路由（可以封装成一个Nav导航组件专门写路由导航），<code>to</code> 属性的值没有简写（路径和组件已经配置好了）</p><p>路由出口：指定多级路由组件渲染在哪里———— <code>Outlet组件</code></p><p>引入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在哪个组件使用，就在哪个组件引入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Outlet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用；</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="默认路由" tabindex="-1"><a class="header-anchor" href="#默认路由" aria-hidden="true">#</a> 默认路由</h3><p>默认路由————改路由地址———— <code>Route</code> 组件的第三个属性（重新创建一个作为默认路由）：<code>index</code> 是 入口 优先执行 的意思，布尔值（直接写就是true），<code>element</code> 值设置为 <code>Navigate</code> 内置组件，\`Navigate\`\`的to属性用于指定默认跳转的路由路径，这样页面第一次打开时就会跳转到这个子路由</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xinwen<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Xinwen</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Xinwen</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xinwen/guonei<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Guonei</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Guonei</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guoji<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Guoji</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Guoji</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">index</span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guonei<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Navigate</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由小结" tabindex="-1"><a class="header-anchor" href="#路由小结" aria-hidden="true">#</a> 路由小结</h3><ol><li>定义路由组件</li><li>指定路由路径和路由组件的联系</li><li>通过路由路径导航到路由组件</li><li>配置默认路由</li></ol><p>二级路由</p><ol><li>定义路由组件</li><li>在一级路由内部指定路由路径和路由组件的联系（在哪里联系，在哪里引入组件）</li><li>通过路由路径导航到路由组件</li><li>指定多级路由渲染在哪里（路由出口）</li><li>在一级路由内配置默认路由</li></ol><p>路由组件在切换过程中，不被使用的组件会被React销毁（先卸载旧的，再挂载新的）</p><h3 id="路由相关的hooks-react-router-dom提供的-不是react提供的" tabindex="-1"><a class="header-anchor" href="#路由相关的hooks-react-router-dom提供的-不是react提供的" aria-hidden="true">#</a> 路由相关的hooks（react-router-dom提供的，不是react提供的）</h3><p><code>useRoutes()</code> 创建路由器对象（代替了Routes和Route两个路由组件） （只有函数式组件才能用hook）：</p><ol><li>参数是一个数组，数组里是配置对象，每一个对象都是一个路由，对象里有path（路由路径）和element（组件对象）两个基本配置项。返回的就是整个路由器routes。</li></ol><p>（画小圈建立知识网络）</p><p>children用来配置多级路由，值是一个数组，数组中是对象，每一个对象都是一个子路由。要配置最后一个带index和element（值还是Navigate内置组件）的子路由，作为默认路由</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/xinwen&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token function">load</span><span class="token punctuation">(</span>Xinwen<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;xinwen&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;guonei&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token function">load</span><span class="token punctuation">(</span>Guonei<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;guoji&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token function">load</span><span class="token punctuation">(</span>Guoji<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment">// element: &lt;Guonei&gt;&lt;/Guonei&gt;,</span>
            <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>guonei<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：直接用 <code>表达式语法{}</code> 把路由对象（相当于标签的简化形式）添加到要渲染的位置（也叫注册路由）（return的整个值都是虚拟DOM，是有结构的）（数组会遍历展示）。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 引入路由器的配置对象</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&quot;./router&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建路由器对象</span>
<span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token function">useRoutes</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 渲染路由组件</span>
<span class="token punctuation">{</span>routes<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码优化： 把路由器对象配置到touter目录下的index.js里，暴露出去使用</p><p>（知识的时效性越来越低，以前是一个学期。）</p><p>（行动力，行动力）</p><p>代码优化：把导航组件（一般组件）封装到components里</p><p>路由器对象：meta——添加额外的路由数据，约定俗成，是一个对象</p><p>简化导航代码</p><p>所有表单都要经过验证，所有用户输入的内容都要经过验证</p><p>用户在前端输入的所有数据都市非法的（为了避免乱输路径），新添加一个路由对象配置404页面，通配符代表所有路由地址（这样可以减轻服务器压力）（404路由要放到最後）</p><p>添加路由是否添加到导航中去，在meta里添加一个元数据即可</p><h3 id="路由总结" tabindex="-1"><a class="header-anchor" href="#路由总结" aria-hidden="true">#</a> 路由总结</h3><ol><li>BrowserRouter：包裹所有的路由组件</li><li>Routes：包裹所有的单个路由组件</li><li>Route：创建单个的路由组件</li><li>Link组件用来创建路由导航（所有路由相关组件都要放在BrowserRouter里），to属性用来导航至对应路由路径的组件。</li><li>NavLink：可以设置样式的导航，带有一个动态的active类名</li><li>路由出口：指定多级路由组件渲染在哪里————Outlet</li><li>默认路由————改路由地址————Route组件的第三个属性（重新创建一个作为默认路由）：index 入口 优先执行，布尔值（直接写就是true），element值设置为Navigate内置组件，Navigate的to属性用于指定默认跳转的路由路径，这样页面第一次打开时就会跳转到这个子路由</li></ol><p>补充：如果都是一级路由，</p><h3 id="域名和url地址" tabindex="-1"><a class="header-anchor" href="#域名和url地址" aria-hidden="true">#</a> 域名和URL地址</h3><p>网络间的设备相互通信靠IP地址来进行，我们访问网站一直用IP地址不便于记忆，所以才有了DNS、域名。</p><p>计算机是个傻子。</p><p>192.168.23.235</p><p>IP地址分两个版本</p><p>IPV4：4组0~255的数值组成的，每一组之间使用<code>.</code>进行分隔。</p><p>IPV6</p><p><code>www.baidu.com</code></p><ul><li><p>域名</p><p>域名的结构：3部分</p><ol><li><p>顶级域名、一级域名</p><ul><li>com，商业机构</li><li>net，网络组织</li><li>org，非盈利组织</li><li>edu，教育</li><li>gov，国家部分</li><li>cn，中国</li><li>us，美国</li><li>hk，香港</li></ul></li><li><p>二级域名</p><p>是我们自己花钱注册的。</p></li><li><p>主机名</p><p><code>www.baidu.com</code>有一个商业机构baidu，访问的的是baidu这个商业机构的网站里面的一台叫<code>www</code>的这台主机。</p><p>是我自己定义的。</p></li></ol></li><li><p>DNS（网域名称系统，<code>Domain Name System</code>），将域名和IP地址进行一系列绑定。</p></li><li><p>URL</p><p><code>www.baidu.com</code>这种东西叫URL地址（统一资源定位符），用来表示要请求的资源的具体地址。通常我们输入的URL地址不完整。</p><p><code>http://www.ceshi.com:80/test/test.html?par1=var1&amp;par2=var2#p</code></p><ul><li><p><code>http://</code>，协议。约定。约定了浏览器怎么和对应的网站服务器进行通信。这个协议名是浏览器自己默认带的一般为<code>http</code>或<code>https</code>。</p><p><code>https://www.baidu.com/</code></p><p><code>https</code>也是协议名。</p><p><code>http://localhost/demo/</code></p></li><li><p><code>www.ceshi.com</code>，服务器地址。</p></li><li><p><code>:80</code>，端口号。表示你要链接服务器的哪个端口，默认的时候<code>http</code>是<code>80</code>端口，如果是<code>https</code>是<code>443</code>端口。</p><p>65535</p><p>你确实确实能够访问到一台服务器。访问到这台服务器之后这台服务器的所有内容都能让你看见吗？</p><p>192.168.15.56</p><p>我只把某个目录共享出来让你能够访问。其他的访问不了。你共享出来的目录我们叫web根目录。</p></li><li><p><code>test/test.html</code>，文件路径</p><p>要访问目标服务器根目录中的<code>test目录</code>中的<code>test.html</code></p><p>默认索引。</p></li><li><p><code>?par1=var1&amp;par2=var2</code>，查询字符串，给后端传递数据用的。</p><p>问号后面是一组一组的<code>名字=值</code>这种方式的数据，多组这种数据之间使用<code>&amp;</code>符来分隔。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>ie=utf8&amp;
f=8&amp;
rsv_bp=1&amp;
rsv_idx=1&amp;
tn=baidu&amp;
wd=shuaige&amp;
fenlei=256&amp;
rsv_pq=d51d5c4d0000b54c&amp;
rsv_t=967fgKanHc56Wi0mR3G6rLYFZrOUlfDb4nPNQP8p7TmayLs57NkEdjSBl5Q&amp;
rqlang=cn&amp;
rsv_dl=tb&amp;
rsv_enter=1&amp;
rsv_sug3=10&amp;
rsv_sug1=7&amp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>#p</code>，片段标识符。部分用来获取某个大资源里面的一部分。</p><p>用来获得大资源中的一部分。哪一份得靠名字来进行区分。</p></li></ul></li></ul>`,99),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","day08.html.vue"]]);export{k as default};
