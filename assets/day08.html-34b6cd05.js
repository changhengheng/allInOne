import{_ as a,p as e,q as p,a1 as t}from"./framework-5866ffd3.js";const s={},n=t(`<h2 id="新的hook" tabindex="-1"><a class="header-anchor" href="#新的hook" aria-hidden="true">#</a> 新的Hook</h2><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext</h3><p>context 上下文的意思</p><p>useContext是新的组件间通信方式，可用于隔代传递</p><p>hooks组件-useContext-A--B--C</p><p>使用：</p><ol><li><p>使用createContext()创建context对象，会返回一个上下文对象，将这个对象暴露出去</p></li><li><p>上下文对象身上有一个内置组件 context.Provider，使用这个内置组件包裹所有的后代组件，并传递value属性（属性名是预先配置好的，不能更改），value的值就是要传递的数据，这样所有的后代组件都可以使用这个数据了</p></li><li><p>在要使用数据的组件里，导入暴露的上下文对象</p></li><li><p>使用useContext() 接收祖先组件传递的数据（直接调用，传入上下文对象，结果就是传递的数据），就能在当前组件内使用了</p></li></ol><p>这个hook一般不用，但是得了解。</p><p>redux内部就是使用了这个hook封装的</p><h3 id="发布订阅机制-pubsub-js" tabindex="-1"><a class="header-anchor" href="#发布订阅机制-pubsub-js" aria-hidden="true">#</a> 发布订阅机制 pubsub-js</h3><p>原理应用很广</p><p>搜索功能</p><p>练习组件：heroSearch</p><p>pubsub适用于任意组件间通信</p><ol><li>安装</li><li>引入（在哪个组件使用就在哪个组件引入）</li><li>使用 三个方法： 发布： PubSub.publish(&#39;频道名称&#39;,要发布的数据) 订阅： PubSub.subscribe(&#39;频道名称&#39;,(message,data)=&gt;{ // message 要订阅的频道名称，和第一个参数意义，不用，但是必须写，因为要用data // data 订阅的数据 }) 取消订阅： PubSub.unsubscribe(&quot;要取消订阅的频道名称&quot;) 不传参就取消订阅所有的频道</li></ol><p>button的样式</p><p>pubsub不能直接写在函数式组件的最顶层，否则后续更新数据时组件会重新创建并挂载，就会进入无限循环</p><p>主动思考</p><p>想想明白思路，再一步一不做</p><p>axios封装的问题</p><p>sql模糊查询</p><p>优化：切换组件时取消订阅</p><p>组件将卸载和其他生命周期可以写在一个函数里</p><p>只要不更新视图，发布就可以不用写在生命周期内</p><h2 id="react路由" tabindex="-1"><a class="header-anchor" href="#react路由" aria-hidden="true">#</a> react路由</h2><p>SPA的概念：整个网站只有一个页面，这个页面由多个组件组成。</p><p>SPA都是通过路由实现的</p><p>区分路径和域名</p><p>路由的概念（key和value的映射）</p><p>做app用的native包，做网页用的dom包</p><p>安装 导入</p><p>APP根组件 导入三个内置组件：BrowserRouter、Route、Routes</p><p>BrowserRouter：包裹所有的路由组件 Routes：包裹所有的单个路由组件 Route：创建单个的路由组件</p><p>使用</p><p>Route创建单个路由组件：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>路由路径<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>组件<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>组件分类：</p><p>一般组件和路由组件</p><p>配置根路由：&#39;/&#39;</p><h3 id="路由导航-内置组件link" tabindex="-1"><a class="header-anchor" href="#路由导航-内置组件link" aria-hidden="true">#</a> 路由导航：内置组件Link</h3><p>Link组件用来创建路由导航（所有路由相关组件都要放在BrowserRouter里），to属性用来导航至对应路由路径的组件。标签体可以写链接名（就是a标签）</p><p>NavLink：可以设置样式的导航，带有一个动态的active类名</p><p>NavLink和Link的本质都是a链接，可以通过标签选择器取消下划线</p><p>（钻太深了，首尾不能顾）</p><p>BrowerRouter永远要放到路由组件的最外层：放到index.js里渲染根组件的地方</p><h3 id="二级路由" tabindex="-1"><a class="header-anchor" href="#二级路由" aria-hidden="true">#</a> 二级路由</h3><p>组件的新命名方式：统一index.jsx，也可以命名为组件名（两种都可以）</p><p>子路由组件定义在一级路由组件的文件夹内</p><p>写法：嵌套在一级路由里，使用Route定义即可</p><p>path配置路由路径的两种方式：</p><ul><li>简写：只写当前路由路径，不加/</li><li>全写：从一级路由一直拼接到当前层级的路由路径</li></ul><p>使用NavLink（任意地方）导航二级路由，to属性的值没有简写（路径和租组件已经配置好了）</p><p>路由出口：指定多级路由组件渲染在哪里————Outlet</p><p>默认路由————改路由地址————Route组件的第三个属性（重新创建一个作为默认路由）：index 入口 优先执行，布尔值（直接写就是true），element值设置为Navigate内置组件，Navigate的to属性用于指定默认跳转的路由路径，这样页面第一次打开时就会跳转到这个子路由</p><h2 id="路由小结" tabindex="-1"><a class="header-anchor" href="#路由小结" aria-hidden="true">#</a> 路由小结</h2><ol><li>定义路由组件</li><li>指定路由路径和路由组件的联系</li><li>通过路由路径导航到路由组件</li><li>配置默认路由</li></ol><p>二级路由</p><ol><li>定义路由组件</li><li>在一级路由内部指定路由路径和路由组件的联系（在哪里联系，在哪里引入组件）</li><li>通过路由路径导航到路由组件</li><li>指定多级路由渲染在哪里（路由出口）</li><li>在一级路由内配置默认路由</li></ol><p>路由组件在切换过程中，不被使用的组件会被React销毁（先卸载旧的，再挂载新的）</p><h2 id="路由相关的hooks-react-router-dom提供的-不是react提供的" tabindex="-1"><a class="header-anchor" href="#路由相关的hooks-react-router-dom提供的-不是react提供的" aria-hidden="true">#</a> 路由相关的hooks（react-router-dom提供的，不是react提供的）</h2><p>useRoutes() 创建路由对象 （只有函数式组件才能用hook）：</p><ol><li>参数是一个数组，数组里是配置对象，每一个对象都是一个路由，对象里有path（路由路径）和element（组件对象）两个基本配置项。返回的就是整个路由器routes。</li></ol><p>（画小圈建立知识网络）</p><p>children用来配置多级路由，值是一个数组，数组中是对象，每一个对象都是一个子路由。要配置最后一个带index和element（值还是Navigate内置组件）的子路由，作为默认路由</p><p>使用：直接用表达式把路由对象（相当于标签的简化形式）添加到要渲染的位置（也叫注册路由）（return的整个值都是虚拟DOM，是有结构的）（数组会遍历展示）。</p><p>代码优化： 把路由器对象配置到touter目录下的index.js里，暴露出去使用</p><p>（知识的时效性越来越低，以前是一个学期。）</p><p>（行动力，行动力）</p><p>代码优化：把导航组件（一般组件）封装到components里</p><p>路由器对象：meta——添加额外的路由数据，约定俗成，是一个对象</p><p>简化导航代码</p><p>所有表单都要经过验证，所有用户输入的内容都要经过验证</p><p>用户在前端输入的所有数据都市非法的（为了避免乱输路径），新添加一个路由对象配置404页面，通配符代表所有路由地址（这样可以减轻服务器压力）（404路由要放到最後）</p><p>添加路由是否添加到导航中去，在meta里添加一个元数据即可</p>`,74),o=[n];function i(l,r){return e(),p("div",null,o)}const c=a(s,[["render",i],["__file","day08.html.vue"]]);export{c as default};
