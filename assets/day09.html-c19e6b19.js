import{_ as t,M as e,p,q as o,R as a,t as i,N as c,a1 as n}from"./framework-5866ffd3.js";const l={},r=n(`<p>params传参</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://api.xiaohigh.com/heros/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用<code>：参数名</code>进行占位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/hreodetail/:id&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>HeroDetails<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>HeroDetails<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;herodetail&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求地址：api.xiaohai.com/heros/{id}</p><p>代码执行顺序问题导致的链式调用数组方法报错的问题的解决方法：加一个判断（逻辑与）</p><p>如果后台返回的数据代HTML和CSS甚至是JS，react不会解析，而是会直接作为txt插入页面，这是处于安全性的考虑。而要解析html、css甚至是js，需要使用一个dangerouslySetInnerHTML属性（位于props对象身上）。该属性的值必须是一个对象，key是__html（固定），value是渲染解析的带样式的数据。容器标签内不需要再写渲染的数据。</p><p>undefined时，src就不执行了</p><p>react组件执行流程问题： 首先，遇到组件标签，会解析，如果是函数式组件，会找到并调用该函数，并执行其中的代码，直到return拿到虚拟DOM；如果是类式组件，会找到该类并new实例化调用，执行其中的代码，再调用render方法拿到虚拟DOM（render会首先执行一次）；（render总是最开始时执行一次），生命周期钩子会在对应的节点触发。</p>`,9),u={href:"https://juejin.cn/post/7132092727218421767",target:"_blank",rel:"noopener noreferrer"},d=n(`<p>封装nav时隐藏对应的组件</p><p>nav导航里隐藏英雄详情，传一个meta数据即可</p><h2 id="useparams-hook-react-router-dom的hook" tabindex="-1"><a class="header-anchor" href="#useparams-hook-react-router-dom的hook" aria-hidden="true">#</a> useParams() hook react-router-dom的hook</h2><p>作用：获取params参数</p><p>传递多个params参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://api.xiaohigh.com/heros/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用<code>：参数名</code>进行占位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/hreodetail/:id/:name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>HeroDetails<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>HeroDetails<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;herodetail&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取params参数</p><p>useParams()直接调用，就能拿到所有的params参数，值是一个对象，可以解构赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="usesearchparams-hook-react-router-dom的hook" tabindex="-1"><a class="header-anchor" href="#usesearchparams-hook-react-router-dom的hook" aria-hidden="true">#</a> useSearchParams() hook react-router-dom的hook</h2><p>作用：获取query参数</p><p>传递query参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/herodetail?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://cdn.xiaohigh.com</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&quot;heroPic&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由不用占位</p><p>获取query参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>getQuery<span class="token punctuation">,</span> setGetQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> id <span class="token operator">=</span> getQuery<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>useSearchParams()是一个react-router-dom提供的hook，返回值是一个数组，类似于useState，参数一是一个对象数据，参数二是用于更新该数据的一个方法（一般不用）。参数一需要调用get方法并传入数据名（传参时定义好的）来获取传递过来的query参数</p><h2 id="uselocation-hook-react-router-dom的hook" tabindex="-1"><a class="header-anchor" href="#uselocation-hook-react-router-dom的hook" aria-hidden="true">#</a> useLocation() hook react-router-dom的hook</h2><p>作用：接收路由传递的state状态数据</p><p>传递state状态数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/herodetail&quot;</span> state<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://cdn.xiaohigh.com</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&quot;heroPic&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用state属性传递state状态数据，state属性的值一般是一个对象</p><p>接收state状态数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>
<span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useLocation()的返回值是一个对象，对象中有一个state数据对象保存了所有传递过来的state状态数据，可以多层结构赋值获取</p><p>组件间通信总结：</p><ol><li>props（父子）</li><li>useContext()（祖先和后代）</li><li>pubsub-js（任意组件）</li><li>路由传参（有路由跳转关系的组件之间） <ol><li><p>params 缺点：麻烦（需要占位） 必须按照占位顺序传 优点：传参和路由路径完全一致（params参数是路由路径的一部分）</p></li><li><p>query 优点： 传递的数据的个数和位置没有要求（不用占位） 缺点： 地址栏比较难看（查询字符串）</p></li><li><p>state 优点： 地址栏不显示数据，相对安全 缺点</p><p>特点： state传递的数据存放在浏览器的历史记录history对象上，复制粘贴网址到新浏览器上时可能会报错并打不开网页（因为没有历史记录）</p></li></ol></li></ol><h2 id="usenavigate-编程式导航-hook-react-router-dom的hook" tabindex="-1"><a class="header-anchor" href="#usenavigate-编程式导航-hook-react-router-dom的hook" aria-hidden="true">#</a> useNavigate() 编程式导航 hook react-router-dom的hook</h2><p>作用：使用编程式导航，跳转路由链接</p><p>编程式导航和声明式导航</p><p>声明式导航：点击标签会直接进行跳转</p><p>编程式导航：写事件，不直接跳，自己手动调用useNavigate()获取navigate()函数进行跳转。这样可以在事件中添加自己的逻辑。</p><p>基本使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 调用hook拿到navigete方法</span>
  <span class="token keyword">let</span> toHeroDetail <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toHeroDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 编程式导航调用useNavigate()返回的方法navigete()跳转</span>
  <span class="token keyword">let</span> <span class="token function-variable function">toDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数是路由路径</span>
    <span class="token function">toHeroDetail</span><span class="token punctuation">(</span><span class="token string">&quot;/herodetail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编程式导航的传参方式（三种）：</p><p>navigate()函数的参数是跳转的路径</p><p>params 直接拼，路由路径中需要占位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> <span class="token function-variable function">toDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 传递params参数</span>
      <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/herodetail/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>query 直接拼，不需要占位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> <span class="token function-variable function">toDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token comment">// 传递query参数</span>
     <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/herodetail?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>state 用第二个参数，是一个配置对象，里面可以有一个state配置项，值是一个对象，用来传递state参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> <span class="token function-variable function">toDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token comment">// 传递state参数</span>
     <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&quot;/herodetail&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收参数的方式和声明式导航一致</p><h2 id="历史记录-编程式导航-后退" tabindex="-1"><a class="header-anchor" href="#历史记录-编程式导航-后退" aria-hidden="true">#</a> 历史记录（编程式导航）：后退</h2><p>给navigate函数传-1可以回到上一步</p><p>navigate配置对象的replace参数用来控制跳转时是否替换历史记录（布尔值）（设置为true时，当次路由跳转不会被添加到历史记录，点回退会直接推到上上一条）</p><h2 id="路由懒加载" tabindex="-1"><a class="header-anchor" href="#路由懒加载" aria-hidden="true">#</a> 路由懒加载</h2><p>正常情况下，react在解析路由时，会加载（下载）所有的路由组件（只在匹配到路由时挂载），这样当路由组件非常多时会消耗过多的资源，可以用路由懒加载进行优化，只在路由匹配成功时加载对应的组件。</p><p>实现：</p><p>1.从react导入lazy（方法）和Suspense内置组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.lazy的参数是一个回调，回调中执行import(&#39;路由路径&#39;)，实现懒加载组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> Ref <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../pages/Ref/Ref&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.懒加载组件的使用：<code>&lt;Suspense fallback={&lt;div&gt;正在加载中......&lt;/div&gt;}&gt;&lt;Ref /&gt;&lt;/Suspense&gt;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>正在加载中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：懒加载组件一定要放到常规路由组件之后引入，不然会报错 注意：fallback用来指定加载页面的loading效果</p><p>代码优化：封装懒加载函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>正在加载中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：首页、登录、注册、404 等组件一般不需要懒加载</p><h2 id="hashrouter和browserrouter" tabindex="-1"><a class="header-anchor" href="#hashrouter和browserrouter" aria-hidden="true">#</a> HashRouter和BrowserRouter</h2><p>两个是一样的，都是用来包裹在路由最外层的标签</p><p>区别：</p><ol><li><p>hashRouter上多了一个#（锚点）</p></li><li><p>browserRouter没有#</p></li><li><p>项目部署 hashRouter 部署时直接打包，放在服务器就可以运行 BrowserRouter 部署是必须在后台服务器配置好才可以运行，配置为返回一个index.html就可以了（由index.html就可以找到其他任何组件）</p><p>后台优先级比前端高，如果找不到会报404。hash永远不会报错</p></li></ol><p>实际项目中一定用的是browserrouter（因为简洁）</p><h2 id="路由原理" tabindex="-1"><a class="header-anchor" href="#路由原理" aria-hidden="true">#</a> 路由原理</h2><p>hash路由的原理是借助原生JS中的hashchange事件，来监听地址栏的hash值（锚点值）（发生变化时触发）（通过location对象获取），当hash发生变化时通过innerHTML插入对应的组件到页面中</p><p>browserRouter的原理是使用history的pushState方法向浏览器追加新的历史记录（不用真的跳转），当url发生变化时（通过loaction对象获取）（会触发点击事件），判断出匹配的路径并通过innerHTML插入对应的组件到页面中</p><h2 id="state传参的原理" tabindex="-1"><a class="header-anchor" href="#state传参的原理" aria-hidden="true">#</a> state传参的原理</h2><ul><li>pushState方法 <ul><li>参数1：追加新记录时保存的数据</li><li>参数2：新纪录的标题</li><li>参数3：新纪录的url</li></ul></li></ul><p>state传递的数据会通过pushState方法添加到新的历史记录中去，位于history对象身上，就可以在跳转后的组件中获取到。如果复制地址给另一个人，因为他没有历史记录，通过state传递的数据就会丢失，就有可能报错。</p><h1 id="redux-第五种组件间通信方式" tabindex="-1"><a class="header-anchor" href="#redux-第五种组件间通信方式" aria-hidden="true">#</a> Redux（第五种组件间通信方式）</h1><p>作用：用来集中管理状态数据的一个工具（里面存储了一系列状态数据，以及用于更新对应数据的方法）</p><p>可以看成是一种适用于任意组件间的通信方式</p><p>三大原则：</p><ul><li>单一数据源</li><li>state只读</li><li>使用纯函数来执行产生新state（同样的输入产生同样的输出，没有副作用）</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @reduxjs/tookit <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建src/store/index.js</p><p>导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createSlice<span class="token punctuation">,</span>configureStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.createSlice创建一个切片对象</p><p>let countSlice = createSlice({ // 数据名 name：&quot;count&quot;, // 数据默认值 initialState:{ value:1 } })</p><p>参数是一个配置对象，返回值是一个对象</p><p>3.configureStore创建一个store对象，store就是仓库。</p><p>let store = configureStore({ reducer:countSlice.reducer })</p><p>参数是一个配置对象，数据的reducer属性是一个纯函数（用于直接更新对应数据，无额外操作），reducer配置项相当于一个小的store（存对应的数据及相关的方法）</p><p>注：纯函数指的是，给你同样的输入，要返回同样的输出，没有其他多余的操作</p><p>4.读取数据</p><p>store.getState() store里的数据只能通过getState()方法来读</p><p>5.入口文件引入store仓库即可</p><h3 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h3><p>let countSlice = createSlice({ // 数据名 name：&quot;count&quot;, // 数据默认值 initialState:{ value:1 }, // 两个作用：创建reducer函数，创建action对象 reducers:{ incre:function(state,action){ state.value += action.payload } } })</p><p>action描述一个行为/动作，是一个对象：{type:&quot;行为类型&quot;,payload:更新的数据（行为作用的对象，是一个将要发生变化的数据）}，state等价于initialState数据对象，用来更新initialState中的数据</p><p>type 行为类型等价于切片对象中的ruducers对象中的函数名</p><p>在切片对象中提取action方法：</p><p>let {incre} = countSlce.actions</p><p>更新数据： store.dispatch(incre( )) dispatch 分发一个数据或者行为</p><p>incre()行为需要传一个参数（既不是state，也不是action）传的其实是payload（更新的数据）</p><p>小结：</p><p>一个redux里只能有一个store，可以有多个reducer，一个reducer里可以有多个action和state（state和action是对应的）</p><p>configureStore创建一个store</p><p>action和state组合在一起叫做一个切片对象，createSlice创建一个切片对象</p><p>createSlice的reducers在创建reducer函数的同时也创建action，reducers中的每一个函数都是一个action函数</p><p>读取数据只能通过store.getState</p><p>更新时需要通过切片对象找到状态数据对应的方法：countSlice.actions进行更新</p><p>调用action方法需要通过store.dispatch，action的形参传递给了action对象里的payload</p>`,109);function k(v,m){const s=e("ExternalLinkIcon");return p(),o("div",null,[r,a("p",null,[a("a",u,[i("https://juejin.cn/post/7132092727218421767"),c(s)])]),d])}const h=t(l,[["render",k],["__file","day09.html.vue"]]);export{h as default};
