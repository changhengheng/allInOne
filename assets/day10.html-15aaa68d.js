import{_ as a,p as s,q as n,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h1 id="day10" tabindex="-1"><a class="header-anchor" href="#day10" aria-hidden="true">#</a> Day10</h1><h2 id="不用react-redux的redux的用法" tabindex="-1"><a class="header-anchor" href="#不用react-redux的redux的用法" aria-hidden="true">#</a> 不用react-redux的redux的用法</h2><p>创建 <code>Redux</code> 组件，测试在组件中使用 <code>redux</code> 管理 <code>Redux</code> 组件的状态数据</p><ol><li><p>store中暴露store对象</p></li><li><p>读取state数据：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>store.getState()</code> 拿到的是一个对象，对象不能直接写在js表达式内</p><p>注：value是数据名</p></li><li><p>更新state数据</p><p>state是只读的，要改必须调用该数据的action方法。</p><p>1.暴露action方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token punctuation">{</span> incre <span class="token punctuation">}</span> <span class="token operator">=</span> countSlice<span class="token punctuation">.</span>actions<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.引入action方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> incre <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../store&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.使用 <code>store.dispatch()</code> 调用action方法更新state数据</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">incre</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>redux的数据不是状态数据，数据更新不会触发视图更新（react不认可这种数据更新方式），要触发视图更新，需要通过 <code>store.subscribe()</code> （了解即可）订阅store中数据的变化，参数是一个回调，会在数据变化时调用，在这个回调中更新组件中的某个状态数据更新视图（了解了解），可以显示出store数据的更新（后面更新不用这种方法）</p><p>注：action方法的参数会传递给action对象的payload</p><h2 id="redux核心概念" tabindex="-1"><a class="header-anchor" href="#redux核心概念" aria-hidden="true">#</a> redux核心概念</h2><ol><li><p><code>store</code></p><p>数据仓库</p><p>一个项目只能有一个 <code>store</code></p><p>存储了一系列数据以及更新对应数据的方法</p><p><code>store</code> 对象上的三个方法：</p><ol><li><code>getState()</code> ---获取数据</li><li><code>dispatch()</code> ---分发行为---行为更新数据</li><li><code>subscribe()</code> ---订阅数据变化---数据变化时触发回调</li></ol></li><li><p><code>reducer</code></p><p>是一个函数</p><p>概念上由 <code>state</code>（原始数据）和 <code>action</code>（更新数据的方法）组成</p><p>切片对象的 <code>reducers配置项</code> 里放的都是一个一个 <code>reducer函数</code>，同时也创建了 <code>action函数</code> （后续更新会用到）</p><p>一个 <code>store</code> 中可以有多个 <code>reducer函数</code></p></li><li><p><code>action对象</code></p><p>是一个 <code>原生JS对象</code>，是 <code>reducer函数</code> 的第二个默认参数</p><p>描述行为，是一个对象：<code>{type:行为,payload:行为作用的数据}</code></p></li><li><p>获取state数据</p><p>通过 <code>store.getState()</code> 方法获取state状态数据，值是一个对象，对象中保存了所有的数据</p></li><li><p>更新store数据</p><p>通过切片对象的 <code>actions属性</code> 拿到 <code>action方法</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>action1<span class="token punctuation">,</span>action2<span class="token punctuation">}</span> <span class="token operator">=</span> slice<span class="token punctuation">.</span>actions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分别暴露：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token punctuation">{</span>action1<span class="token punctuation">,</span>action2<span class="token punctuation">}</span> <span class="token operator">=</span> slice<span class="token punctuation">.</span>actions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>引入action方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>action1<span class="token punctuation">,</span>action2<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分发action方法更新数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">action</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里调用的是reducer的action方法，参数传给了payload，type就是函数名。这种方式是同步更新store中的数据，dispatch接收了一个action对象。</p><p>上面的代码等价于（内部是这么做的）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span>action<span class="token punctuation">,</span><span class="token literal-property property">payload</span><span class="token operator">:</span>payload<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>异步更新state数据需要传入一个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="异步更新" tabindex="-1"><a class="header-anchor" href="#异步更新" aria-hidden="true">#</a> 异步更新</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步更新的方法</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token function-variable function">asyncSaveContent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接收trunk函数的默认参数一：dispatch方法</span>
    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://v1.hitokoto.cn&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// dispatch 调用数据对应的  action方法 更新对应的数据，</span>
        <span class="token comment">// 实参会传递给 reducer （action方法）的 action对象 的 payload属性</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">saveContent</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hitokoto<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为一个reducer中的state对应的action方法是纯函数，其中不允许写异步代码，也不允许有返回值，只能直接更新state的状态数据。因此需要重新定义一个方法来写异步，这个异步方法内部在更新state数据时本质上还是 <code>store.diapatch</code>调用 state 对应的 action 方法。</p><p>不同之处在于，给 <code>store.dispatch()</code>传递的是一个 <code>thunk函数</code>，调用 thunk 函数时总是将 <code>(dispatch, getState)</code> 作为它的参数，你可以根据需要在 thunk 中直接使用 dispatch 触发同步的 action 更新数据。</p><h3 id="模块化slices切片对象" tabindex="-1"><a class="header-anchor" href="#模块化slices切片对象" aria-hidden="true">#</a> 模块化slices切片对象</h3><p>旧版本约定文件名是reducer</p><p>store/slices/countSlice.js</p><h3 id="综合练习" tabindex="-1"><a class="header-anchor" href="#综合练习" aria-hidden="true">#</a> 综合练习</h3><p>组件：zanSlice.js</p><h3 id="redux使用流程-两大步" tabindex="-1"><a class="header-anchor" href="#redux使用流程-两大步" aria-hidden="true">#</a> redux使用流程（两大步）</h3><h4 id="一、创建切片对象" tabindex="-1"><a class="header-anchor" href="#一、创建切片对象" aria-hidden="true">#</a> 一、创建切片对象</h4><ol><li><p>引入createSlice方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createSlice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建切片对象（包括state和action对象===一个reducer）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> zanSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 数据名</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zan&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 数据默认值</span>
    <span class="token literal-property property">initialState</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// reducer，其中每一个函数都是一个reducer</span>
    <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// state等同于initialState，参数二是action对象</span>
        <span class="token function">increZan</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>value <span class="token operator">+=</span> payload
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取并暴露同步 <code>action方法</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token punctuation">{</span> increZan <span class="token punctuation">}</span> <span class="token operator">=</span> zanSlice<span class="token punctuation">.</span>actions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建并暴露异步方法（同步返回一个对象，异步返回一个函数--高阶函数（trunk）--异步不是说这个函数是异步，而是说要写异步代码时要写在这个函数里，比如axios发请求）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token function-variable function">asyncIncreZan</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increZan</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>暴露切片对象的reducer</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> zanSlice<span class="token punctuation">.</span>reducer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="二、创建store仓库对象" tabindex="-1"><a class="header-anchor" href="#二、创建store仓库对象" aria-hidden="true">#</a> 二、创建store仓库对象</h4><ol start="6"><li><p>引入configureStore</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建store仓库对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>引入切片对象的reducer，通过这个reducer建立store仓库和切片对象的联系</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> zanSlice <span class="token keyword">from</span> <span class="token string">&#39;./slices/zanSlice&#39;</span>

<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">zan</span><span class="token operator">:</span>zanSlice <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>暴露store对象出去使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>要和文档建立联系，而不是二级经验（要自己去接触处理一手信息，这样才不会丧失思考能力）</p><p>UI==视图==组件</p><h2 id="redux的执行过程" tabindex="-1"><a class="header-anchor" href="#redux的执行过程" aria-hidden="true">#</a> redux的执行过程</h2><p>多敲几遍——</p><h2 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux" aria-hidden="true">#</a> react-redux</h2><p>redux是第三方库，react-redux是react插件，简化redux在react中的使用</p><p>安装:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i react-redux <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提供的两个hook：</p><ol><li><code>useSelector</code> 获取store中的所有数据</li><li><code>useDispatch</code> 获取store中的dispatch方法</li></ol><p>使用：</p><ol><li><p>入口文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Provider</code> 是一个组件，用来包裹所有可能会使用到store数据的组件，直接包在APP组件外层即可。和HashRouter、BrowserRouter不冲突，随便哪一个在外层。</p><p>属性：</p><p>store，值是store仓库对象（导入）</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在使用store数据的组件内引入两个hook：useSelector、useDispatch</p><p><code>useSelector</code>：参数是一个回调，默认参数是 <code>state</code>（获取到所有的store状态数据），return state，返回值是state，即是所有的store中的数据</p><p>获取所有数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token operator">=&gt;</span>state<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取需要的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token operator">=&gt;</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token operator">=&gt;</span>state<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>useDispatch</code>: 可以获取到dispatch方法，只要用这个dispatch方法拿到的数据都是响应式的：只要store中的数据发生变化，就能够监听到，并且更新所有使用了store的数据的视图</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>对比：</p><ol><li><p>获取到的数据可以直接使用，不用再store.getValue()</p></li><li><p>不用再store.dispatch，直接dispatch</p></li><li><p>因为是响应式数据，直接触发视图更新</p></li></ol><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><p>Hitokoto非路由组件---Redux的子组件</p><p>纯函数（reducer）里只能写同步代码，异步代码要写在外部，通过dispatch调用</p><p>Lol非路由组件---Redux的子组件</p><p>只有公共数据才会放到store里，组件自己的数据不用放到store里</p><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><p>能用一门语言写一个hello world出来，就算入门了</p><p>json格式都是配置文件</p>`,44),c=[p];function o(i,l){return s(),n("div",null,c)}const d=a(t,[["render",o],["__file","day10.html.vue"]]);export{d as default};
