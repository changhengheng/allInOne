import{_ as o,M as t,p as i,q as r,R as e,t as a,N as p,a1 as l}from"./framework-5866ffd3.js";const n={},s=e("h1",{id:"webpack运行机制与核心工作原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#webpack运行机制与核心工作原理","aria-hidden":"true"},"#"),a(" webpack运行机制与核心工作原理")],-1),d={class:"custom-container tip"},_=e("p",{class:"custom-container-title"},"TIP",-1),b={href:"https://www.bilibili.com/video/BV1Ju41117TD?p=5&vd_source=4130504c2c444d5224abe5e26ca788d2",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"本篇是上面链接视频的笔记。",-1),k=l('<h2 id="webpack工作流程" tabindex="-1"><a class="header-anchor" href="#webpack工作流程" aria-hidden="true">#</a> webpack工作流程</h2><p>一个前端项目中通常散落着各种资源文件（js、css、html、图片、json等等），其中每一个文件在webpack中都是一个模块，webpack会通过打包将其聚集在一起。</p><p>打包过程中：</p><ul><li>通过Loader处理特殊类型资源的加载，比如加载样式、图片</li><li>通过Plugin实现各种自动化的构建任务，比如自动压缩、自动发布</li></ul><p>webpack启动后会通过配置找到其中的某一个文件作为指定入口，一般是一个js文件（一般是index.js）。会根据该文件中的import或require等语句解析推断出来该文件依赖的一些资源模块，然后再分别去解析每个资源模块的依赖，不断递归，最终形成一个项目中所有文件之间的一个依赖关系树。</p><p>生成依赖关系树之后，webpack会递归依赖树，找到每一个节点所对应的资源文件，再根据配置选项中的Loader配置，交给对应的Loader加载对应的模块，最后将Loader加载的结果放入bundle.js文件，从而实现整个项目的打包。</p><p>对于依赖模块中无法通过JS代码表示的资源模块，比如图片或字体文件，一般的Loader会将其单独作为资源文件拷贝到输出目录中，然后将这个资源文件所对应的访问路径作为这个模块的导出成员暴露给外部。</p><blockquote><p>一般会将这些文件放入public文件夹</p></blockquote><p>如果没有Loader，webpack就无法实现各种类型的资源文件的加载。</p><p>插件并不会影响webpack的核心工作过程，只是为webpack提供了更强大的扩展能力，为webpack工作过程中的每个环节都提供了一个钩子，可以为每个环节植入一些<strong>自定义</strong>的任务，从而扩展webpack打包功能以外的能力。</p><h2 id="webpack工作过程中的细节-关键源码分析" tabindex="-1"><a class="header-anchor" href="#webpack工作过程中的细节-关键源码分析" aria-hidden="true">#</a> webpack工作过程中的细节（关键源码分析）</h2><p>思路：</p><ol><li>Webpack CLI 启动打包流程</li><li>载入Webpack核心模块，创建Compiler对象</li><li>使用Compiler对象开始编译整个项目</li><li>从入口文件开始，解析模块依赖，形成依赖关系树</li><li>递归依赖树，将每个模块交给对应的Loader处理</li><li>合并Loader处理完的结果，将打包结果输出到dist目录</li></ol>',13);function w(u,m){const c=t("ExternalLinkIcon");return i(),r("div",null,[s,e("div",d,[_,e("p",null,[e("a",b,[a("学习资料"),p(c)])]),h]),k])}const L=o(n,[["render",w],["__file","webpack运行机制与核心工作原理.html.vue"]]);export{L as default};
